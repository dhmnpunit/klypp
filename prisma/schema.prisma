// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String        @unique
  username      String?       @unique
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ownedPlans    Plan[]        @relation("PlanOwner")
  memberships   PlanMember[]  @relation("MemberPlans")
  notifications Notification[]
  fcmTokens     FCMToken[]
}

model Plan {
  id              String       @id @default(cuid())
  name            String
  cost            Float
  renewalFrequency String
  maxMembers      Int
  currentMembers  Int         @default(0)
  startDate       DateTime
  nextRenewalDate DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  ownerId         String
  owner           User        @relation("PlanOwner", fields: [ownerId], references: [id])
  members         PlanMember[] @relation("PlanMembers")

  @@index([ownerId])
}

model PlanMember {
  id        String   @id @default(cuid())
  status    String   @default("PENDING") // PENDING, ACTIVE, DECLINED
  userId    String
  planId    String
  user      User     @relation("MemberPlans", fields: [userId], references: [id])
  plan      Plan     @relation("PlanMembers", fields: [planId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([planId])
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  metadata  Json?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model FCMToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
} 
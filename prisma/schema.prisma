generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  username      String?        @unique
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  canceledPlans CanceledPlan[] @relation("UserCanceledPlans")
  fcmTokens     FCMToken[]
  notifications Notification[]
  ownedPlans    Plan[]         @relation("PlanOwner")
  memberships   PlanMember[]   @relation("MemberPlans")
}

model Plan {
  id               String       @id @default(cuid())
  name             String
  cost             Float
  renewalFrequency String
  maxMembers       Int
  currentMembers   Int          @default(0)
  ownerId          String
  startDate        DateTime
  nextRenewalDate  DateTime
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  owner            User         @relation("PlanOwner", fields: [ownerId], references: [id])
  members          PlanMember[] @relation("PlanMembers")

  @@index([ownerId])
}

model PlanMember {
  id        String   @id @default(cuid())
  userId    String
  planId    String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan     @relation("PlanMembers", fields: [planId], references: [id])
  user      User     @relation("MemberPlans", fields: [userId], references: [id])

  @@index([userId])
  @@index([planId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model FCMToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CanceledPlan {
  id               String   @id @default(cuid())
  name             String
  cost             Float
  renewalFrequency String
  canceledAt       DateTime @default(now())
  userId           String
  memberCount      Int      @default(0)
  wasOwner         Boolean  @default(true)
  originalPlanId   String?
  user             User     @relation("UserCanceledPlans", fields: [userId], references: [id])

  @@index([userId])
}
